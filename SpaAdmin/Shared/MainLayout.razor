@inherits LayoutComponentBase

@using Microsoft.Extensions.Options;
@using DesDer.Middlewares;

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject ILogger<MainLayout> Logger;
@inject NavigationManager NavigationManager;
@inject IOptionsSnapshot<SupportedCultureOptions> CultureOptions;
@inject IStringLocalizer<GlobalResources> Localizer;

<PageTitle>SpaAdmin</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <RadzenDropDown Change=@( _ => ChangeLanguage()) @bind-Value=@Culture Data="@CultureOptions.Value.SupportedCultures.Keys.ToArray()"/>
            <MatButton Label=@Localizer["CloseConnection"] OnClick="@( _ => Logout())" />
        </div>

        <article class="content px-4">
            <CascadingValue Value=@LogoutAction Name="LogoutAction">
                @Body
            </CascadingValue>
            
        </article>
    </main>
</div>

@code {
    public Action LogoutAction { get; } 
    private string? Culture { get; set; }
    private SupportedCultureOptions _supportedCultureOptions;

    public MainLayout() : base()
    {
        LogoutAction = Logout;
    }

    protected override void OnInitialized()
    {
        _supportedCultureOptions = CultureOptions.Value;
        Culture = _supportedCultureOptions.SupportedCultures.First(
            kVPair => kVPair.Value == CultureInfo.CurrentCulture.Name
        ).Key;
        AuthenticationStateProvider.AuthenticationStateChanged  += OnStateChanged;
    }

    private async void OnStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        if(state.User.Identity.IsAuthenticated)
        {
            Logger.LogInformation("User is authenticated");
        }
        else
        {
            Logger.LogInformation("User is not authenticated");
            NavigationManager.NavigateTo("?handler=logout", true);
        }
    }
    private void ChangeLanguage()
    {
        NavigationManager.NavigateTo($"?handler=changeLanguage&lang={_supportedCultureOptions.SupportedCultures[Culture]}", true);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("?handler=logout", true);
    }
}