@inject IHeaderService HeaderService

<h4>Выберите изображение для фона загаловка</h4>


@if(Images != null)
{
    <div class="d-flex">
        <img src=@SelectedImage.Path width="100%"/>
    </div>
}
<InputFile id="fileInput112" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png" />

<MudButton HtmlTag="label"
           Variant="MudBlazor.Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput112"
           FullWidth=true
           Style="color: white; background-color: #594ae2ff">
    Загрузить изображение
</MudButton>

<h4>Другие изображение</h4>
@if (Images != null)
{
    <div class="d-flex" >
        @foreach(var image in Images)
        {
            <div class="p-3 w-25 rounded border-2 m-2" 
                 style="overflow: hidden; @(image.IsSelected ? "border-color: #594ae2ff" : "")"
                 @onclick=@( _ => SelectImage(image))>
                <img src=@image.FileModel.Path width="100%"/>
            </div>
        }
        
    </div>
}

<h4>Цвет текста</h4>
<input type="color" @bind-value=TextColor/>

@code {
    private FileModel SelectedImage { get; set; }
    private List<SelectableImage>? Images { get; set;  }
    private string TextColor 
    {
        get => HeaderService.TextColor;
        set => HeaderService.TextColor = value;
    }

    protected override async Task OnInitializedAsync()
    {
        var images = await HeaderService.GetHeaderImages();
        Images = new(images.Length);

        foreach(var image in images)
        {
            Images.Add(new SelectableImage { FileModel = image});
            if(image == HeaderService.SelectedImage)
            {
                SelectableImage.selected = Images.Last();
            }
        }

        SelectedImage = HeaderService.SelectedImage;
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        using var stream = await HeaderService.PrepareStream(e.File.Name);

        await e.File.OpenReadStream(maxAllowedSize: 8 * 1024 * 1024 * 10).CopyToAsync(stream);
    }

    private void SelectImage(SelectableImage selectableImage)
    {
        HeaderService.SelectedImage = selectableImage.FileModel;
        SelectedImage = selectableImage.FileModel;
        SelectableImage.selected = selectableImage;
        StateHasChanged();
    }

    class SelectableImage
    {
        public static SelectableImage selected; 
        public bool IsSelected { get => this == selected;  }
        public FileModel FileModel { get; set; } = null!;
    }
}
