@page "/analytics/{PostId:int?}"
@inject IPostService PostService;
@inject IPostAnalyticsService PostAnalyticsService;
@inject IStringLocalizer<Analytics> Localizer;
@inject IStringLocalizer<GlobalResources> GlobalLocalizer;
@inject IJSRuntime JSRuntime;
@inject RoutesService Routes;

@if (PostAnalytics != null)
{
    <div class="card m-3 p-2">
        <MatTabGroup ActiveIndexChanged=@TabIndexChanged>
            <MatTab Label=@Localizer["ForTheLastWeek"] />
            <MatTab Label=@Localizer["ForTheLastMonth"] />
            <MatTab Label=@Localizer["ForTheLastYear"] />
        </MatTabGroup>
        <RadzenChart>
            <RadzenLineSeries Data=@VisitsDayCount CategoryProperty="Date" ValueProperty="Count">
                <RadzenMarkers MarkerType="MarkerType.Square" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Step=@DateStep FormatString=@FormatString>
                <RadzenGridLines Visible="true" />
            </RadzenCategoryAxis>
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
    <div style="display : flex;">
        <div class="card w-50 m-3 p-2">
            <h3>@Localizer["SourcesOfVisits"]</h3>
            <RadzenChart>
                <RadzenPieSeries Data="@PostAnalytics.VisitsSources" Title="Revenue" CategoryProperty="Source"
                ValueProperty="Count" />
            </RadzenChart>
        </div>
        <div class="card w-50 m-3 p-2">
            <h2>@Localizer["TotalVisits"]: @PostAnalytics.TotalVisits</h2>
            <h3>@Localizer["TotalUniqueVisits"]: @PostAnalytics.TotalUniqueVisits</h3>
        </div>
    </div>

    <div class="card w-100 m-3 p-5">
        <h1>@GlobalLocalizer["Name"]: @Post.Name</h1>
        <h3>@GlobalLocalizer["Route"] : 
            @try
            {
                @Routes.NavNode.GetPathTo(Guid.Parse(Post.PathGuid)).Remove(0,5)
            }
            catch
            {
                var path = "/";
                @path;
            }
        </h3>
        
        <h2>@Localizer["Titles"]</h2>

        <MatTextField @bind-Value=@Post.EnHeader Label=@GlobalLocalizer["EnName"] />
        <MatTextField @bind-Value=@Post.EnDescription Label=@GlobalLocalizer["Description"] TextArea="true"/>
        <br>
        <MatTextField @bind-Value=@Post.RuHeader Label=@GlobalLocalizer["RuName"] />
        <MatTextField @bind-Value=@Post.RuDescription Label=@GlobalLocalizer["Description"] TextArea="true"/>
        <br>
        <MatTextField @bind-Value=@Post.KgHeader Label=@GlobalLocalizer["KgName"] />
        <MatTextField @bind-Value=@Post.KgDescription Label=@GlobalLocalizer["Description"] TextArea="true"/>

        <MatButton Raised="true" OnClick=@(async _ => await Save())>@GlobalLocalizer["Save"]</MatButton>
    </div>

    <MatButton Raised="true" Label=@Localizer["OpenInEdiotr"] OnClick=@(async _ => await JSRuntime.InvokeVoidAsync("helper.open", $"/DesDer/{Post.Id}"))/>
}
@if (PostId == null)
{
    <MatH1 style="color: red;">@GlobalLocalizer["NotFound"]</MatH1>
}
@code {
    [Parameter]
    public int? PostId { get; set; } = null;
    private PostAnalytics? PostAnalytics { get; set; } = null;
    private Post Post { get; set; }
    private TimeSpan DateStep { get; set; } = TimeSpan.FromDays(1);
    private string FormatString { get; set; } = "{0:dd.MM.yyyy}";
    private IEnumerable<VisitsDayCount>? VisitsDayCount { get; set; } = null;
    
    private PostViewModel ViewModel { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (PostId != null)
        {
            try
            {
                Post = await PostService.GetPost(PostId.Value);
                PostAnalytics = await PostAnalyticsService.GetPostAnalytics(Post);
                VisitsDayCount = PostAnalytics.LastWeek;
                ViewModel = Post;
            }
            catch (Exception exc)
            {
                PostId = null;
                PostAnalytics = null;
            }
        }
    }

    public async Task TabIndexChanged(int index)
    {
        if (PostAnalytics != null) switch (index)
            {
                case 0:
                    VisitsDayCount = PostAnalytics.LastWeek;
                    DateStep = TimeSpan.FromDays(1);
                    FormatString = "{0:dd.MM.yyyy}";
                    break;
                case 1:
                    VisitsDayCount = PostAnalytics.LastMonth;
                    DateStep = TimeSpan.FromDays(7);
                    FormatString = "{0:dd.MM.yyyy}";
                    break;
                case 2:
                    VisitsDayCount = PostAnalytics.LastYear;
                    DateStep = TimeSpan.FromDays(30);
                    FormatString = "{0:MMM}";
                    break;
            }
    }

    public async Task Save()
    {
        await PostService.SavePost(Post);
    }
}